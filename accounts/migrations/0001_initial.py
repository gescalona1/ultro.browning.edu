# Generated by Django 2.1.3 on 2018-12-10 04:13

import accounts.managers
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(help_text='Your username', max_length=20, unique=True, verbose_name='username')),
                ('email', models.CharField(help_text='Your email', max_length=40, unique=True, verbose_name='email')),
                ('first_name', models.CharField(help_text='Your first name', max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(help_text='Your last name', max_length=30, verbose_name='last name')),
                ('date_of_birth', models.DateField(help_text='Your birth (MM/DD/YYYY)', verbose_name='date of birth')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
                ('is_staff', models.BooleanField(default=False, verbose_name='staff')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('graduation_year', models.PositiveIntegerField(default=2018, help_text='Your expected graduation year', verbose_name='graduation year')),
                ('specialized', models.CharField(choices=[('T', 'Tech'), ('B', 'Builder'), ('O', 'Other')], default='O', max_length=1, verbose_name='Type')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'permissions': (('can_edit_pages', 'Can edit pages'), ('can_view_notebook', 'Can view notebook')),
            },
            managers=[
                ('objects', accounts.managers.MemberManager()),
            ],
        ),
    ]
